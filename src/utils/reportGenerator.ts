import { HealthReport } from '@/types/health';

export const generateReportPDF = (report: HealthReport): void => {
  const content = generateReportContent(report);
  
  // Create and download the report as a text file (PDF generation would require additional libraries)
  const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });
  const url = URL.createObjectURL(blob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = `diabetes-risk-assessment-${new Date().toISOString().split('T')[0]}.txt`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  URL.revokeObjectURL(url);
};

const generateReportContent = (report: HealthReport): string => {
  const bmi = (report.patientData.weight / ((report.patientData.height / 100) ** 2)).toFixed(1);
  
  return `
GLUCOSE GUARDIAN - DIABETES RISK ASSESSMENT REPORT
Generated on: ${new Date(report.generatedAt).toLocaleDateString()}

=================================================
PATIENT INFORMATION
=================================================
Age: ${report.patientData.age} years
Gender: ${report.patientData.gender}
Height: ${report.patientData.height} cm
Weight: ${report.patientData.weight} kg
BMI: ${bmi}
Ethnicity: ${report.patientData.ethnicity}

=================================================
HEALTH METRICS
=================================================
Fasting Blood Glucose: ${report.patientData.bloodGlucoseFasting} mg/dL
Post-Meal Blood Glucose: ${report.patientData.bloodGlucosePostMeal} mg/dL
Sleep Hours: ${report.patientData.sleepHours} hours/night
Physical Activity: ${report.patientData.physicalActivityDays} days/week (${report.patientData.physicalActivityIntensity} intensity)
Family History of Diabetes: ${report.patientData.familyHistory ? 'Yes' : 'No'}
Stress Level: ${report.patientData.stressLevel}/10

=================================================
EXISTING CONDITIONS
=================================================
${report.patientData.existingConditions.length > 0 ? report.patientData.existingConditions.join('\n') : 'None reported'}

=================================================
CURRENT MEDICATIONS
=================================================
${report.patientData.medications.length > 0 ? report.patientData.medications.join('\n') : 'None reported'}

=================================================
DIETARY HABITS (Daily Servings)
=================================================
Fruits & Vegetables: ${report.patientData.dietaryHabits.fruitsVegetables}
Processed Foods: ${report.patientData.dietaryHabits.processedFoods}
Sugary Drinks: ${report.patientData.dietaryHabits.sugaryDrinks}

=================================================
CURRENT SYMPTOMS
=================================================
${Object.entries(report.patientData.symptoms)
  .filter(([_, value]) => value)
  .map(([key, _]) => key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()))
  .join('\n') || 'None reported'}

=================================================
RISK ASSESSMENT RESULTS
=================================================
Risk Level: ${report.prediction.riskLevel.toUpperCase().replace('-', ' ')}
Risk Percentage: ${report.prediction.riskPercentage}%
Confidence Level: ${report.prediction.confidence}%

KEY RISK FACTORS:
${report.prediction.keyFactors.map((factor, index) => `${index + 1}. ${factor}`).join('\n')}

=================================================
PERSONALIZED RECOMMENDATIONS
=================================================

DIETARY RECOMMENDATIONS:
${report.personalizedAdvice.diet.map((advice, index) => `${index + 1}. ${advice}`).join('\n')}

EXERCISE RECOMMENDATIONS:
${report.personalizedAdvice.exercise.map((advice, index) => `${index + 1}. ${advice}`).join('\n')}

LIFESTYLE MODIFICATIONS:
${report.personalizedAdvice.lifestyle.map((advice, index) => `${index + 1}. ${advice}`).join('\n')}

HEALTH MONITORING:
${report.personalizedAdvice.monitoring.map((advice, index) => `${index + 1}. ${advice}`).join('\n')}

=================================================
RECOMMENDED NEXT STEPS
=================================================
${report.nextSteps.map((step, index) => `${index + 1}. ${step}`).join('\n')}

=================================================
IMPORTANT DISCLAIMER
=================================================
${report.disclaimer}

=================================================
Report generated by Glucose Guardian
AI-Powered Diabetes Risk Prediction System
=================================================
`;
};